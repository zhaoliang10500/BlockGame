namespace ca.mcgill.ecse223.block.model;

use Block223PlayMode.ump;
use Block223Persistence.ump;
use Block223States.ump;

class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;
   public Game findGame(String name) {
      if (name == null) {
         return null;
      }

      for (Game game: getGames()) {
         if (name.equals(game.getName())) {
            return game;
         }
      }
      
      return null;
   }
}

class User {
   unique username;
   1 -> 1..2 UserRole roles;
   before constructor, setUsername {
   	 if (aUsername == null || aUsername.length() < 1) throw new RuntimeException("The username must be specified.");
   }
}

class UserRole {
   abstract;
   password;
   before constructor, setPassword {
     if (aPassword == null || aPassword.length() < 1) throw new RuntimeException("The player password needs to be specified.");
   }
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 390; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   Integer nrBlocksPerLevel;
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;
   before constructor, setName {
    if (aName == null || aName.equals("")) {
	  throw new RuntimeException("The name of a game must be specified.");
	}
  }
  before constructor {
  	if (aBlock223.findGame(aName) != null)
    {
      throw new RuntimeException("Cannot create due to duplicate name");
    }
   }
   before constructor, setNrBlocksPerLevel {
    if (aNrBlocksPerLevel <= 0) {
	  throw new RuntimeException("The number of blocks per level must be greater than zero.");
	}
	
  }
  before setNrBlocksPerLevel {
  if (aNrBlocksPerLevel < numberOfBlockAssignments()) throw new RuntimeException("The maximum number of blocks per level cannot be less than the number of existing blocks in a level.");
  }
  public Block findBlock(int id) {
      for (Block block : getBlocks()) {
         if (id == block.getId()) {
            return block;
         }
      }
      return null;
   }   
   public Block getRandomBlock() {
 	  return getBlock(ThreadLocalRandom.current().nextInt(0,numberOfBlocks()));
   }
}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000;
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   Integer green;
   Integer blue;
   Integer points;

   before constructor, setRed {
      if (aRed < MIN_COLOR || aRed > MAX_COLOR) {
         throw new RuntimeException("Red must be between 0 and 255.");
      }
   }
   before constructor, setBlue {
      if (aBlue < MIN_COLOR || aBlue > MAX_COLOR) {
         throw new RuntimeException("Blue must be between 0 and 255.");
      }
   }
   before constructor, setGreen {
      if (aGreen < MIN_COLOR || aGreen > MAX_COLOR) {
         throw new RuntimeException("Green must be between 0 and 255.");
      }
   }
   before constructor, setPoints {
      if (aPoints < MIN_POINTS || aPoints > MAX_POINTS) {
         throw new RuntimeException("Points must be between 1 and 1000.");
      }
   }
}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
public BlockAssignment findBlockAssignment(int gridHorizontalPosition, int gridVerticalPosition){
		int h, v;
		for (BlockAssignment assignment: getBlockAssignments()) {
			h = assignment.getGridHorizontalPosition();
			v = assignment.getGridVerticalPosition();
			if (h == gridHorizontalPosition && v == gridVerticalPosition) {
				return assignment;
			}
		}
		return null;
  }
}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   * -- 1 Level level;
   * -- 1 Block block;

}

class Ball {
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   Integer minBallSpeedY;
   Double ballSpeedIncreaseFactor;
   before constructor, setBallSpeedIncreaseFactor {
    if (aBallSpeedIncreaseFactor <= 0) {
	  throw new RuntimeException("The speed increase factor of the ball must be greater than zero.");
	}
  }
  before constructor, setMinBallSpeedY {
    if (aMinBallSpeedY < 0) {
	  throw new RuntimeException("The minimum speed of the ball must be greater or equal to zero.");
	}
  }
  before constructor, setMinBallSpeedX {
    if (aMinBallSpeedX < 0) {
	  throw new RuntimeException("The minimum speed of the ball must be greater or equal to zero.");
	}
  }
}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   Integer minPaddleLength;
    before constructor, setMinPaddleLength {
    if (aMinPaddleLength <= 0) {
	  throw new RuntimeException("The minimum length of the paddle must be greater than zero.");
	}
  }
  before constructor, setMaxPaddleLength {
    if (aMaxPaddleLength <= 0 || aMaxPaddleLength > 390) {
	  throw new RuntimeException("The maximum length of the paddle must be greater than zero and less than or equal to 390.");
	}
  }
}
